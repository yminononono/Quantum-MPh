from jpype.types import JInt, JDouble, JArray, JString

def assign_material(node, material, tag, name, selection = None):

    # # C:\Program Files\COMSOL\COMSOL63\Multiphysics\data\comsol_basic_material_lib.mph
    # material_pymodel = client.load('C:\\Program Files\\COMSOL\\COMSOL63\\Multiphysics\\data\\comsol_basic_material_lib.mph')
    # material_model = material_pymodel.java
    # # materials = material_model.material('basic_material_lib_descr')
    # air = material_model.material('air')
    # print( air.propertyGroup() )
    # print( air.propertyGroup('def').func() )
    # print( air.propertyGroup('RefractiveIndex') )

    # pprint.pprint( dir(mat1) )
    # #mat1.copy(air)

    if material == "air":
        mat = node.material().create(tag, 'Common')
        mat.label(name)
        mat.set("family", material)

        mat.propertyGroup("def").func().create("eta", "Piecewise")
        mat.propertyGroup("def").func().create("Cp", "Piecewise")
        mat.propertyGroup("def").func().create("rho", "Analytic")
        mat.propertyGroup("def").func().create("k", "Piecewise")
        mat.propertyGroup("def").func().create("cs", "Analytic")
        mat.propertyGroup("def").func().create("an1", "Analytic")
        mat.propertyGroup("def").func().create("an2", "Analytic")
        mat.propertyGroup().create("RefractiveIndex", "RefractiveIndex", "Refractive index")
        mat.propertyGroup().create("NonlinearModel", "NonlinearModel", "Nonlinear model")
        mat.propertyGroup().create("idealGas", "idealGas", "Ideal gas")
        mat.propertyGroup("idealGas").func().create("Cp", "Piecewise")
        mat.propertyGroup("def").func("eta").set("arg", "T")
        mat.propertyGroup("def").func("eta").set("pieces", [["200.0", "1600.0", "-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4"]])
        mat.propertyGroup("def").func("eta").set("argunit", "K")
        mat.propertyGroup("def").func("eta").set("fununit", "Pa*s")
        mat.propertyGroup("def").func("Cp").set("arg", "T")
        mat.propertyGroup("def").func("Cp").set("pieces", [["200.0", "1600.0", "1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4"]])
        mat.propertyGroup("def").func("Cp").set("argunit", "K")
        mat.propertyGroup("def").func("Cp").set("fununit", "J/(kg*K)")
        mat.propertyGroup("def").func("rho").set("expr", "pA*0.02897/R_const[K*mol/J]/T")
        mat.propertyGroup("def").func("rho").set("args", ["pA", "T"])
        mat.propertyGroup("def").func("rho").set("fununit", "kg/m^3")
        mat.propertyGroup("def").func("rho").set("argunit", ["Pa", "K"])
        mat.propertyGroup("def").func("rho").set("plotaxis", ["off", "on"])
        mat.propertyGroup("def").func("rho").set("plotfixedvalue", ["101325", "273.15"])
        mat.propertyGroup("def").func("rho").set("plotargs", [["pA", "101325", "101325"], ["T", "273.15", "293.15"]])
        mat.propertyGroup("def").func("k").set("arg", "T")
        mat.propertyGroup("def").func("k").set("pieces", [["200.0", "1600.0", "-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4"]])
        mat.propertyGroup("def").func("k").set("argunit", "K")
        mat.propertyGroup("def").func("k").set("fununit", "W/(m*K)")
        mat.propertyGroup("def").func("cs").set("expr", "sqrt(1.4*R_const[K*mol/J]/0.02897*T)")
        mat.propertyGroup("def").func("cs").set("args", ["T"])
        mat.propertyGroup("def").func("cs").set("fununit", "m/s")
        mat.propertyGroup("def").func("cs").set("argunit", ["K"])
        mat.propertyGroup("def").func("cs").set("plotfixedvalue", ["273.15"])
        mat.propertyGroup("def").func("cs").set("plotargs", [["T", "273.15", "373.15"]])
        mat.propertyGroup("def").func("an1").set("funcname", "alpha_p")
        mat.propertyGroup("def").func("an1").set("expr", "-1/rho(pA,T)*d(rho(pA,T),T)")
        mat.propertyGroup("def").func("an1").set("args", ["pA", "T"])
        mat.propertyGroup("def").func("an1").set("fununit", "1/K")
        mat.propertyGroup("def").func("an1").set("argunit", ["Pa", "K"])
        mat.propertyGroup("def").func("an1").set("plotaxis", ["off", "on"])
        mat.propertyGroup("def").func("an1").set("plotfixedvalue", ["101325", "273.15"])
        mat.propertyGroup("def").func("an1").set("plotargs", [["pA", "101325", "101325"], ["T", "273.15", "373.15"]])
        mat.propertyGroup("def").func("an2").set("funcname", "muB")
        mat.propertyGroup("def").func("an2").set("expr", "0.6*eta(T)")
        mat.propertyGroup("def").func("an2").set("args", ["T"])
        mat.propertyGroup("def").func("an2").set("fununit", "Pa*s")
        mat.propertyGroup("def").func("an2").set("argunit", ["K"])
        mat.propertyGroup("def").func("an2").set("plotfixedvalue", ["200"])
        mat.propertyGroup("def").func("an2").set("plotargs", [["T", "200", "1600"]])
        mat.propertyGroup("def").set("thermalexpansioncoefficient", "")
        mat.propertyGroup("def").set("molarmass", "")
        mat.propertyGroup("def").set("bulkviscosity", "")
        mat.propertyGroup("def").set("thermalexpansioncoefficient", ["alpha_p(pA,T)", "0", "0", "0", "alpha_p(pA,T)", "0", "0", "0", "alpha_p(pA,T)"])
        mat.propertyGroup("def").set("molarmass", "0.02897[kg/mol]")
        mat.propertyGroup("def").set("bulkviscosity", "muB(T)")
        mat.propertyGroup("def").set("relpermeability", ["1", "0", "0", "0", "1", "0", "0", "0", "1"])
        mat.propertyGroup("def").set("relpermittivity", ["1", "0", "0", "0", "1", "0", "0", "0", "1"])
        mat.propertyGroup("def").set("dynamicviscosity", "eta(T)")
        mat.propertyGroup("def").set("ratioofspecificheat", "1.4")
        mat.propertyGroup("def").set("electricconductivity", ["0[S/m]", "0", "0", "0", "0[S/m]", "0", "0", "0", "0[S/m]"])
        mat.propertyGroup("def").set("heatcapacity", "Cp(T)")
        mat.propertyGroup("def").set("density", "rho(pA,T)")
        mat.propertyGroup("def").set("thermalconductivity", ["k(T)", "0", "0", "0", "k(T)", "0", "0", "0", "k(T)"])
        mat.propertyGroup("def").set("soundspeed", "cs(T)")
        mat.propertyGroup("def").addInput("temperature")
        mat.propertyGroup("def").addInput("pressure")
        mat.propertyGroup("RefractiveIndex").set("n", ["1", "0", "0", "0", "1", "0", "0", "0", "1"])
        mat.propertyGroup("NonlinearModel").set("BA", "def.gamma-1")
        mat.propertyGroup("idealGas").func("Cp").label("Piecewise 2")
        mat.propertyGroup("idealGas").func("Cp").set("arg", "T")
        mat.propertyGroup("idealGas").func("Cp").set("pieces", [["200.0", "1600.0", "1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4"]])
        mat.propertyGroup("idealGas").func("Cp").set("argunit", "K")
        mat.propertyGroup("idealGas").func("Cp").set("fununit", "J/(kg*K)")
        mat.propertyGroup("idealGas").set("Rs", "R_const/Mn")
        mat.propertyGroup("idealGas").set("heatcapacity", "Cp(T)")
        mat.propertyGroup("idealGas").set("ratioofspecificheat", "1.4")
        mat.propertyGroup("idealGas").set("molarmass", "0.02897[kg/mol]")
        mat.propertyGroup("idealGas").addInput("temperature")
        mat.propertyGroup("idealGas").addInput("pressure")
        mat.materialType("nonSolid")
    elif material == "silicon":
        mat = node.material().create(tag, 'Common')
        mat.label(name)
        mat.set("family", material)

        mat.propertyGroup().create("Enu", "Young's modulus and Poisson's ratio")
        mat.propertyGroup().create("RefractiveIndex", "Refractive index")
        mat.set("customspecular", [0.7843137254901961, 1, 1])
        mat.set("customdiffuse", [0.6666666666666666, 0.6666666666666666, 0.7058823529411765])
        mat.set("customambient", [0.6666666666666666, 0.6666666666666666, 0.7058823529411765])
        mat.set("noise", True)
        mat.set("fresnel", 0.7)
        mat.set("metallic", JInt(0))
        mat.set("pearl", JInt(0))
        mat.set("diffusewrap", JInt(0))
        mat.set("clearcoat", JInt(0))
        mat.set("reflectance", JInt(0))
        mat.propertyGroup("def").label("Basic")
        mat.propertyGroup("def").set("relpermeability", ["1", "0", "0", "0", "1", "0", "0", "0", "1"])
        mat.propertyGroup("def").set("electricconductivity", ["1e-12[S/m]", "0", "0", "0", "1e-12[S/m]", "0", "0", "0", "1e-12[S/m]"])
        mat.propertyGroup("def").set("thermalexpansioncoefficient", ["2.6e-6[1/K]", "0", "0", "0", "2.6e-6[1/K]", "0", "0", "0", "2.6e-6[1/K]"])
        mat.propertyGroup("def").set("heatcapacity", "700[J/(kg*K)]")
        mat.propertyGroup("def").set("relpermittivity", ["11.7", "0", "0", "0", "11.7", "0", "0", "0", "11.7"])
        mat.propertyGroup("def").set("density", "2329[kg/m^3]")
        mat.propertyGroup("def").set("thermalconductivity", ["130[W/(m*K)]", "0", "0", "0", "130[W/(m*K)]", "0", "0", "0", "130[W/(m*K)]"])
        mat.propertyGroup("Enu").label("Young's modulus and Poisson's ratio")
        mat.propertyGroup("Enu").set("E", "170[GPa]")
        mat.propertyGroup("Enu").set("nu", "0.28")
        mat.propertyGroup("RefractiveIndex").label("Refractive index")
        mat.propertyGroup("RefractiveIndex").set("n", ["3.48", "0", "0", "0", "3.48", "0", "0", "0", "3.48"])
        mat.set("family", "custom")
        mat.set("lighting", "cooktorrance")
        mat.set("fresnel", 0.7)
        mat.set("roughness", 0.5)
        mat.set("anisotropy", JInt(0))
        mat.set("flipanisotropy", False)
        mat.set("metallic", JInt(0))
        mat.set("pearl", JInt(0))
        mat.set("diffusewrap", JInt(0))
        mat.set("clearcoat", JInt(0))
        mat.set("reflectance", JInt(0))
        mat.set("ambient", "custom")
        mat.set("customambient", [0.6666666666666666, 0.6666666666666666, 0.7058823529411765])
        mat.set("diffuse", "custom")
        mat.set("customdiffuse", [0.6666666666666666, 0.6666666666666666, 0.7058823529411765])
        mat.set("specular", "custom")
        mat.set("customspecular", [0.7843137254901961, 1, 1])
        mat.set("noisecolor", "custom")
        mat.set("customnoisecolor", [0, 0, 0])
        mat.set("noisescale", JInt(0))
        mat.set("noise", "off")
        mat.set("noisefreq", JInt(1))
        mat.set("normalnoisebrush", "0")
        mat.set("normalnoisetype", "0")
        mat.set("alpha", JInt(1))
        mat.set("anisotropyaxis", [0, 0, 1])
    elif material == "copper":
        mat = node.material().create(tag, "Common")
        mat.propertyGroup().create("Enu", "Enu", "Young's modulus and Poisson's ratio")
        mat.propertyGroup().create("linzRes", "linzRes", "Linearized resistivity")
        mat.label(name)
        mat.set("family", material)
        mat.propertyGroup("def").set("relpermeability", ["1", "0", "0", "0", "1", "0", "0", "0", "1"])
        mat.propertyGroup("def").set("electricconductivity", ["5.998e7[S/m]", "0", "0", "0", "5.998e7[S/m]", "0", "0", "0", "5.998e7[S/m]"])
        mat.propertyGroup("def").set("thermalexpansioncoefficient", ["17e-6[1/K]", "0", "0", "0", "17e-6[1/K]", "0", "0", "0", "17e-6[1/K]"])
        mat.propertyGroup("def").set("heatcapacity", "385[J/(kg*K)]")
        mat.propertyGroup("def").set("relpermittivity", ["1", "0", "0", "0", "1", "0", "0", "0", "1"])
        mat.propertyGroup("def").set("density", "8960[kg/m^3]")
        mat.propertyGroup("def").set("thermalconductivity", ["400[W/(m*K)]", "0", "0", "0", "400[W/(m*K)]", "0", "0", "0", "400[W/(m*K)]"])
        mat.propertyGroup("Enu").set("E", "110[GPa]")
        mat.propertyGroup("Enu").set("nu", "0.35")
        mat.propertyGroup("linzRes").set("rho0", "1.72e-8[ohm*m]")
        mat.propertyGroup("linzRes").set("alpha", "0.0039[1/K]")
        mat.propertyGroup("linzRes").set("Tref", "298[K]")
        mat.propertyGroup("linzRes").addInput("temperature")
    else:
        raise ValueError("Assigned material not defined")

    if selection:
        if type(selection) == str:
            mat.selection().named(selection)
        else:
            mat.selection().set(selection)